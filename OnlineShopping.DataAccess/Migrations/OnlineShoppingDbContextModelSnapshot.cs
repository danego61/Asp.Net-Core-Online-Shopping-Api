// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShopping.DataAccess.Concrete.EntityFramework;

namespace OnlineShopping.DataAccess.Migrations
{
    [DbContext(typeof(OnlineShoppingDbContext))]
    partial class OnlineShoppingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("AddressDescription");

                    b.Property<string>("AddressName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AddressName");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("AddressID")
                        .HasName("AddressID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("RegionID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CategoryName");

                    b.Property<int>("CategoryStatus")
                        .HasColumnType("int")
                        .HasColumnName("CategoryStatus");

                    b.HasKey("CategoryID")
                        .HasName("CategoryID");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CityName");

                    b.HasKey("CityID")
                        .HasName("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.CreditCard", b =>
                {
                    b.Property<int>("CreditCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CVC")
                        .HasColumnType("int")
                        .HasColumnName("CVC");

                    b.Property<string>("CreditCardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CreditCardName");

                    b.Property<string>("CreditCardNo")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("char(16)")
                        .HasColumnName("CreditCardNo");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ExpireDateMounth")
                        .HasColumnType("int")
                        .HasColumnName("ExpireDateMounth");

                    b.Property<int>("ExpireDateYear")
                        .HasColumnType("int")
                        .HasColumnName("ExpireDateYear");

                    b.Property<string>("NameSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NameSurname");

                    b.HasKey("CreditCardID")
                        .HasName("CreditCardID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditCardNo")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("char(16)")
                        .HasColumnName("CreditCardNo");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("OrderDate");

                    b.Property<int>("OrderPreparationStatus")
                        .HasColumnType("int")
                        .HasColumnName("OrderPreparationStatus");

                    b.Property<int>("OrderShippingStatus")
                        .HasColumnType("int")
                        .HasColumnName("OrderShippingStatus");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("AddressDescription");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ShipCity");

                    b.Property<string>("ShipRegion")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ShipCity");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ShippedDate");

                    b.HasKey("OrderID")
                        .HasName("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.OrderDetails", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("Quantity");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("UnitPrice");

                    b.HasKey("ProductID", "OrderID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("DiscountedPrice");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Explanation");

                    b.Property<byte[]>("Image")
                        .HasColumnType("image")
                        .HasColumnName("Image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Price");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int")
                        .HasColumnName("ProductStatus");

                    b.HasKey("ProductID")
                        .HasName("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RegionName");

                    b.HasKey("RegionID")
                        .HasName("RegionID");

                    b.HasIndex("CityID");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Email");

                    b.Property<Guid?>("EmailVerifyToken")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EmailVerifyToken");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit")
                        .HasColumnName("EmailVerified");

                    b.Property<bool>("IsPasswordChange")
                        .HasColumnType("bit")
                        .HasColumnName("PasswordChange");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("char(64)")
                        .HasColumnName("Password");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Surname");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Customer", b =>
                {
                    b.HasBaseType("OnlineShopping.Entities.Concrete.User");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Employee", b =>
                {
                    b.HasBaseType("OnlineShopping.Entities.Concrete.User");

                    b.Property<int>("EmployeeStatus")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeStatus");

                    b.Property<int>("EmployeeType")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeType");

                    b.ToTable("Empoyees");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Address", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Entities.Concrete.Region", "Region")
                        .WithMany("Addresses")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.CreditCard", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.Customer", "Customer")
                        .WithMany("CreditCards")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Order", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.OrderDetails", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Entities.Concrete.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Product", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Region", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.City", "City")
                        .WithMany("Regions")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Customer", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineShopping.Entities.Concrete.Customer", "UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Employee", b =>
                {
                    b.HasOne("OnlineShopping.Entities.Concrete.User", null)
                        .WithOne()
                        .HasForeignKey("OnlineShopping.Entities.Concrete.Employee", "UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.City", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Region", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("OnlineShopping.Entities.Concrete.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CreditCards");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
